/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiSubscriptionsCurrentGet$Json } from '../fn/subscriptions/api-subscriptions-current-get-json';
import { ApiSubscriptionsCurrentGet$Json$Params } from '../fn/subscriptions/api-subscriptions-current-get-json';
import { apiSubscriptionsCurrentGet$Plain } from '../fn/subscriptions/api-subscriptions-current-get-plain';
import { ApiSubscriptionsCurrentGet$Plain$Params } from '../fn/subscriptions/api-subscriptions-current-get-plain';
import { apiSubscriptionsIdCancelPost } from '../fn/subscriptions/api-subscriptions-id-cancel-post';
import { ApiSubscriptionsIdCancelPost$Params } from '../fn/subscriptions/api-subscriptions-id-cancel-post';
import { apiSubscriptionsPost } from '../fn/subscriptions/api-subscriptions-post';
import { ApiSubscriptionsPost$Params } from '../fn/subscriptions/api-subscriptions-post';
import { SubscriptionDetailsDto } from '../models/subscription-details-dto';

@Injectable({ providedIn: 'root' })
export class SubscriptionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiSubscriptionsPost()` */
  static readonly ApiSubscriptionsPostPath = '/api/Subscriptions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSubscriptionsPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiSubscriptionsPost$Response(
    params?: ApiSubscriptionsPost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<void>> {
    return apiSubscriptionsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSubscriptionsPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiSubscriptionsPost(
    params?: ApiSubscriptionsPost$Params,
    context?: HttpContext
  ): Observable<void> {
    return this.apiSubscriptionsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiSubscriptionsIdCancelPost()` */
  static readonly ApiSubscriptionsIdCancelPostPath =
    '/api/Subscriptions/{id}/cancel';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSubscriptionsIdCancelPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSubscriptionsIdCancelPost$Response(
    params: ApiSubscriptionsIdCancelPost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<void>> {
    return apiSubscriptionsIdCancelPost(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSubscriptionsIdCancelPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSubscriptionsIdCancelPost(
    params: ApiSubscriptionsIdCancelPost$Params,
    context?: HttpContext
  ): Observable<void> {
    return this.apiSubscriptionsIdCancelPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiSubscriptionsCurrentGet()` */
  static readonly ApiSubscriptionsCurrentGetPath = '/api/Subscriptions/current';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSubscriptionsCurrentGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSubscriptionsCurrentGet$Plain$Response(
    params?: ApiSubscriptionsCurrentGet$Plain$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<SubscriptionDetailsDto>> {
    return apiSubscriptionsCurrentGet$Plain(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSubscriptionsCurrentGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSubscriptionsCurrentGet$Plain(
    params?: ApiSubscriptionsCurrentGet$Plain$Params,
    context?: HttpContext
  ): Observable<SubscriptionDetailsDto> {
    return this.apiSubscriptionsCurrentGet$Plain$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<SubscriptionDetailsDto>
        ): SubscriptionDetailsDto => r.body
      )
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSubscriptionsCurrentGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSubscriptionsCurrentGet$Json$Response(
    params?: ApiSubscriptionsCurrentGet$Json$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<SubscriptionDetailsDto>> {
    return apiSubscriptionsCurrentGet$Json(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSubscriptionsCurrentGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSubscriptionsCurrentGet$Json(
    params?: ApiSubscriptionsCurrentGet$Json$Params,
    context?: HttpContext
  ): Observable<SubscriptionDetailsDto> {
    return this.apiSubscriptionsCurrentGet$Json$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<SubscriptionDetailsDto>
        ): SubscriptionDetailsDto => r.body
      )
    );
  }
}
