/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ActiveUsersByPlanDto } from '../models/active-users-by-plan-dto';
import { apiReportsActiveUsersByPlanGet$Json } from '../fn/reports/api-reports-active-users-by-plan-get-json';
import { ApiReportsActiveUsersByPlanGet$Json$Params } from '../fn/reports/api-reports-active-users-by-plan-get-json';
import { apiReportsActiveUsersByPlanGet$Plain } from '../fn/reports/api-reports-active-users-by-plan-get-plain';
import { ApiReportsActiveUsersByPlanGet$Plain$Params } from '../fn/reports/api-reports-active-users-by-plan-get-plain';
import { apiReportsMrrGet$Json } from '../fn/reports/api-reports-mrr-get-json';
import { ApiReportsMrrGet$Json$Params } from '../fn/reports/api-reports-mrr-get-json';
import { apiReportsMrrGet$Plain } from '../fn/reports/api-reports-mrr-get-plain';
import { ApiReportsMrrGet$Plain$Params } from '../fn/reports/api-reports-mrr-get-plain';
import { MrrDto } from '../models/mrr-dto';

@Injectable({ providedIn: 'root' })
export class ReportsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiReportsMrrGet()` */
  static readonly ApiReportsMrrGetPath = '/api/Reports/mrr';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReportsMrrGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReportsMrrGet$Plain$Response(params?: ApiReportsMrrGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MrrDto>> {
    return apiReportsMrrGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReportsMrrGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReportsMrrGet$Plain(params?: ApiReportsMrrGet$Plain$Params, context?: HttpContext): Observable<MrrDto> {
    return this.apiReportsMrrGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MrrDto>): MrrDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReportsMrrGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReportsMrrGet$Json$Response(params?: ApiReportsMrrGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MrrDto>> {
    return apiReportsMrrGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReportsMrrGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReportsMrrGet$Json(params?: ApiReportsMrrGet$Json$Params, context?: HttpContext): Observable<MrrDto> {
    return this.apiReportsMrrGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MrrDto>): MrrDto => r.body)
    );
  }

  /** Path part for operation `apiReportsActiveUsersByPlanGet()` */
  static readonly ApiReportsActiveUsersByPlanGetPath = '/api/Reports/active-users-by-plan';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReportsActiveUsersByPlanGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReportsActiveUsersByPlanGet$Plain$Response(params?: ApiReportsActiveUsersByPlanGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ActiveUsersByPlanDto>>> {
    return apiReportsActiveUsersByPlanGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReportsActiveUsersByPlanGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReportsActiveUsersByPlanGet$Plain(params?: ApiReportsActiveUsersByPlanGet$Plain$Params, context?: HttpContext): Observable<Array<ActiveUsersByPlanDto>> {
    return this.apiReportsActiveUsersByPlanGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ActiveUsersByPlanDto>>): Array<ActiveUsersByPlanDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReportsActiveUsersByPlanGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReportsActiveUsersByPlanGet$Json$Response(params?: ApiReportsActiveUsersByPlanGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ActiveUsersByPlanDto>>> {
    return apiReportsActiveUsersByPlanGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReportsActiveUsersByPlanGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReportsActiveUsersByPlanGet$Json(params?: ApiReportsActiveUsersByPlanGet$Json$Params, context?: HttpContext): Observable<Array<ActiveUsersByPlanDto>> {
    return this.apiReportsActiveUsersByPlanGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ActiveUsersByPlanDto>>): Array<ActiveUsersByPlanDto> => r.body)
    );
  }

}
